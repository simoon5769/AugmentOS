plugins {
    // id 'com.android.application'
    id 'com.android.library'

    //id 'com.google.gms.google-services'
}

import java.util.Properties

def envFile = rootProject.file(".env")
def Properties envProperties = new Properties()

if (envFile.exists()) {
    envProperties.load(new FileInputStream(envFile))
} else {
    logger.warn(".env file not found at ${envFile}")
}

android {
    namespace 'com.augmentos.augmentos_core'
    compileSdk 33

    buildFeatures {
        aidl = true
        buildConfig = true
    }

    defaultConfig {
        namespace "com.augmentos.augmentos_core"

        minSdk 28
        targetSdk 33
        versionCode 1
        versionName "1.0"

        // The actual buildConfigFields:
        buildConfigField "String", "AUGMENTOS_HOST", "\"${envProperties['AUGMENTOS_HOST'] ?: ""}\""
        buildConfigField "String", "AUGMENTOS_PORT", "\"${envProperties['AUGMENTOS_PORT'] ?: ""}\""
        buildConfigField "String", "AUGMENTOS_SECURE", "\"${envProperties['AUGMENTOS_SECURE'] ?: ""}\""

        ndk {
            //noinspection ChromeOsAbiSupport
            abiFilters "armeabi-v7a", "arm64-v8a"
        }

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1,DEPENDENCIES}'
            excludes += '/META-INF/INDEX.LIST'
            excludes += "com/augmentos/augmentoslib/DataStreamType.class"
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'com.google.api.grpc:grpc-google-cloud-speech-v1p1beta1:2.6.0'
    implementation 'com.google.flogger:flogger:0.7.4'
    implementation 'com.google.flogger:flogger-system-backend:0.7.4'
    implementation 'com.google.protobuf:protobuf-java:3.21.12'
    implementation 'com.google.protobuf:protobuf-java-util:3.21.12'
    implementation 'joda-time:joda-time:2.12.2'
    implementation 'io.grpc:grpc-okhttp:1.53.0'
    implementation project(':AugmentOSLib')
    implementation 'com.squareup.picasso:picasso:2.8'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    //navigation
    implementation "androidx.navigation:navigation-fragment:2.2.0"
    implementation "androidx.navigation:navigation-ui:2.2.0"
    implementation "androidx.navigation:navigation-runtime:2.2.0"
    implementation "androidx.fragment:fragment:1.2.0"

    // firebase
    //implementation platform('com.google.firebase:firebase-bom:32.7.1')
    //implementation "com.google.firebase:firebase-auth"
    //implementation 'com.firebaseui:firebase-ui-auth:8.0.2'
    //apply plugin: 'com.google.gms.google-services'

    //for lifecycle service that stays alive forever
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:2.2.0"

    //REST API volley
    implementation 'com.android.volley:volley:1.2.1';

    //EventBus, greenrobot
    implementation("org.greenrobot:eventbus:3.3.1")

    //SGMLib library
    implementation project (":SmartGlassesManager")

    //location services
    implementation 'com.google.android.gms:play-services-location:18.0.0'

    //websocket
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'

//    // To recognize Latin script
//    implementation 'com.google.mlkit:text-recognition:16.0.0'
//
//    // To recognize Chinese script
//    implementation 'com.google.mlkit:text-recognition-chinese:16.0.0'
//
//    // To recognize Devanagari script
//    implementation 'com.google.mlkit:text-recognition-devanagari:16.0.0'
//
//    // To recognize Japanese script
//    implementation 'com.google.mlkit:text-recognition-japanese:16.0.0'
//
//    // To recognize Korean script
//    implementation 'com.google.mlkit:text-recognition-korean:16.0.0'

    // To convert Chinese to Pinyin
    implementation 'com.belerweb:pinyin4j:2.5.0'
    implementation 'com.huaban:jieba-analysis:1.0.2'

    implementation 'io.reactivex.rxjava3:rxjava:3.0.0'
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"

    // SGM leftover for ASG connector
    implementation "org.java-websocket:Java-WebSocket:1.5.2"

    //for VAD (using Silero DNN)
    implementation 'com.github.gkonovalov:android-vad:2.0.1'
    //implementation 'com.microsoft.onnxruntime:onnxruntime-android:1.15.0'

    //Vuzix Ultralite OEM Platform / Vuzix Z100
    implementation 'com.vuzix:ultralite-sdk-android:1.8'

    //background camera stuff
    implementation "androidx.camera:camera-core:1.2.3"
    implementation "androidx.camera:camera-lifecycle:1.2.3"
    implementation "androidx.camera:camera-view:1.2.3"

    implementation "org.osmdroid:osmdroid-android:6.1.10"
//    implementation "com.arthenica:ffmpeg-kit-full:6.0-2"


    api 'com.github.pedroSG94:rtmp-rtsp-stream-client-java:2.1.3'

}

// apply from: rootProject.project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
if (rootProject.findProject(':react-native-config') != null) {
    apply from: rootProject.project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
}